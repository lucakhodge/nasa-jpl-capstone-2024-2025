name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows-release

    steps:
      # ───────────── Checkout ─────────────
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # ───────────── Linux deps ───────────
      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++ cmake git \
            gdal-bin libgdal-dev \
            libtiff5-dev nlohmann-json3-dev

      # ───────────── Windows – configure cache ─────────
      - name: Configure vcpkg binary sources (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if ($env:ACTIONS_RUNTIME_TOKEN -and $env:ACTIONS_CACHE_URL) {
            Write-Host "Using GitHub‑Actions binary cache"
            "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" |
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Host "Building from source (no binary cache)"
            "VCPKG_BINARY_SOURCES=clear" |
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      # ───────────── Windows deps ─────────
      - name: Bootstrap vcpkg & install deps (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat -disableMetrics
          .\vcpkg.exe install `
            gdal[core,png,tiff] `
            tiff `
            nlohmann-json `
            --triplet $env:VCPKG_DEFAULT_TRIPLET `
            --clean-after-build

      # expose vcpkg DLLs for tests
      - name: Add vcpkg runtime DLLs to PATH (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "$env:VCPKG_ROOT\installed\$env:VCPKG_DEFAULT_TRIPLET\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # ───────────── Configure ────────────
      - name: Configure (Linux)
        if: runner.os == 'Linux'
        run: cmake -S mempa/algorithm -B build -DCMAKE_BUILD_TYPE=Release

      - name: Configure (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -S mempa/algorithm -B build `
            -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release

      # ───────────── Build ─────────────────
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build --parallel

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake --build build --config Release --parallel

      # ───────────── Download DEM ──────────
      - name: Download Mars DEM .tif
        run: |
          mkdir -p mempa/algorithm/tests
          curl -L \
            https://planetarymaps.usgs.gov/mosaic/Mars/THEMIS_controlled_mosaics/SinusSabaeus_DayIR_31Jan2014/THEMIS_DayIR_ControlledMosaic_SinusSabaeus_30S00E_100mpp.tif \
            -o mempa/algorithm/tests/mars_dem.tif

      # ───────────── Run tests ─────────────
      - name: Run unit tests (Linux)
        if: runner.os == 'Linux'
        run: ctest --test-dir build --output-on-failure
        env:
          PRINT_OUTPUT: "false"

      - name: Run unit tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ctest --test-dir build -C Release --output-on-failure
        env:
          PRINT_OUTPUT: "false"

      # ───────────── Clean up ──────────────
      - name: Clean build directory (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build --target clean

      - name: Clean build directory (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake --build build --config Release --target clean
